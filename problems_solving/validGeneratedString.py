"""Given a string, words are generated by appending the same word at each position in the substring. 
So for eg. ab will generate abab(append at 0th position), aabb(append at 1st position), abab(append at 2nd position) and so on. 
Now given an initial value('ab') and another string ('aababbab'), find that if the string can be generated from initial using previous method."""


def isGeneratedFrom(orig: str, target: str) -> bool:
    if not target:
        return False
    curLength = float("inf")
    while curLength > 0:
        target = target.replace(orig, "")
        # last iteration did not erase any character
        if curLength == len(target):
            return False
        curLength = len(target)
    return True


def test():
    assert isGeneratedFrom("ab", "aababbab") == True
    assert isGeneratedFrom('a', 'aababbab') == False
    assert isGeneratedFrom('a', '') == False
    assert isGeneratedFrom('ab', 'aaabbb') == True
    assert isGeneratedFrom('abc', 'abaabcbcc') == True
    assert isGeneratedFrom('abc', 'aababcbcc') == False


if __name__ == "__main__":
    test()
